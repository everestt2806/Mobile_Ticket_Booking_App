//MainActivity.java:
package com.finalproject.movieticketbooking.activities;

import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkCapabilities;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.viewpager2.widget.ViewPager2;

import com.finalproject.movieticketbooking.R;
import com.finalproject.movieticketbooking.adapters.BannerAdapter;
import com.finalproject.movieticketbooking.adapters.ViewPagerAdapter;
import com.finalproject.movieticketbooking.models.Banner;
import com.finalproject.movieticketbooking.models.Movie;
import com.google.android.material.tabs.TabLayout;
import com.google.android.material.tabs.TabLayoutMediator;
import com.google.firebase.FirebaseApp;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "MainActivity";
    private FirebaseDatabase database;
    private DatabaseReference bannerRef, moviesRef;

    private ViewPager2 bannerViewPager;
    private ProgressBar progressBar3;
    private Handler handler;
    private Runnable bannerRunnable;
    private BannerAdapter bannerAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        try {
            FirebaseApp.initializeApp(this);
            initViews();
            initFirebase();
            initAdapters();
            loadData();
            handler = new Handler(Looper.getMainLooper());
            setupViewPagerAndTabs();
        } catch (Exception e) {
            Log.e(TAG, "Error in onCreate: " + e.getMessage());
            showError("Failed to initialize app");
        }
    }

    private void initViews() {
        try {
            bannerViewPager = findViewById(R.id.banner);
            progressBar3 = findViewById(R.id.progressBar3);
        } catch (Exception e) {
            Log.e(TAG, "Error in initViews: " + e.getMessage());
        }
    }

    private void initAdapters() {
        try {
            bannerAdapter = new BannerAdapter(new ArrayList<>());
            bannerViewPager.setAdapter(bannerAdapter);
        } catch (Exception e) {
            Log.e(TAG, "Error in initAdapters: " + e.getMessage());
        }
    }

    private void initFirebase() {
        try {
            database = FirebaseDatabase.getInstance();
            bannerRef = database.getReference("banners");
            moviesRef = database.getReference("movies");
        } catch (Exception e) {
            Log.e(TAG, "Error in initFirebase: " + e.getMessage());
            showError("Failed to connect to database");
        }
    }

    private void loadData() {
        if (isNetworkAvailable()) {
            loadBanners();
        } else {
            showError("No internet connection");
        }
    }

    private void setupViewPagerAndTabs() {
        TabLayout tabLayout = findViewById(R.id.tabLayout);
        ViewPager2 viewPagerTabs = findViewById(R.id.viewPagerTabs);

        // Set adapter
        ViewPagerAdapter adapter = new ViewPagerAdapter(this);
        viewPagerTabs.setAdapter(adapter);

        // Fix height for ViewPager2
        viewPagerTabs.getLayoutParams().height = ViewGroup.LayoutParams.WRAP_CONTENT;

        // Link TabLayout with ViewPager2
        new TabLayoutMediator(tabLayout, viewPagerTabs, (tab, position) -> {
            switch (position) {
                case 0:
                    tab.setText("Đang khởi chiếu");
                    break;
                case 1:
                    tab.setText("Sắp khởi chiếu");
                    break;
            }
        }).attach();

        // Add tab selected listener
        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
            @Override
            public void onTabSelected(TabLayout.Tab tab) {
                viewPagerTabs.setCurrentItem(tab.getPosition());
            }

            @Override
            public void onTabUnselected(TabLayout.Tab tab) {}

            @Override
            public void onTabReselected(TabLayout.Tab tab) {}
        });

        // Add page change callback
        viewPagerTabs.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {
            @Override
            public void onPageSelected(int position) {
                super.onPageSelected(position);
                tabLayout.selectTab(tabLayout.getTabAt(position));
            }
        });

        // Enable swipe between tabs
        viewPagerTabs.setUserInputEnabled(true);
    }

    private void loadBanners() {
        progressBar3.setVisibility(View.VISIBLE);
        bannerRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                try {
                    List<Banner> banners = new ArrayList<>();
                    for (DataSnapshot dataSnapshot : snapshot.getChildren()) {
                        try {
                            Banner banner = dataSnapshot.getValue(Banner.class);
                            if (banner != null && banner.getImage() != null && !banner.getImage().isEmpty()) {
                                // Validate URL
                                URL url = new URL(banner.getImage());
                                banners.add(banner);
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "Error parsing banner: " + dataSnapshot.getKey(), e);
                        }
                    }

                    if (!banners.isEmpty()) {
                        setupBannerViewPager(banners);
                    } else {
                        Log.w(TAG, "No valid banners found");
                        // Maybe show a default banner or message
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error loading banners", e);
                    showError("Failed to load banners");
                } finally {
                    progressBar3.setVisibility(View.GONE);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.e(TAG, "Banner loading cancelled", error.toException());
                handleError(error, progressBar3);
            }
        });
    }

    private void setupBannerViewPager(List<Banner> banners) {
        if (!isFinishing() && banners != null && !banners.isEmpty()) {
            bannerAdapter = new BannerAdapter(banners);
            bannerViewPager.setAdapter(bannerAdapter);
            autoScrollBanner();
        }
    }

    private void autoScrollBanner() {
        if (handler != null && bannerViewPager.getAdapter() != null &&
                bannerViewPager.getAdapter().getItemCount() > 0) {

            bannerRunnable = new Runnable() {
                @Override
                public void run() {
                    try {
                        if (!isFinishing()) {
                            int currentItem = bannerViewPager.getCurrentItem();
                            int totalItems = bannerViewPager.getAdapter().getItemCount();
                            bannerViewPager.setCurrentItem(currentItem < totalItems - 1 ? currentItem + 1 : 0, true);
                            handler.postDelayed(this, 3500);
                        }
                    } catch (Exception e) {
                        Log.e(TAG, "Error in banner auto-scroll: " + e.getMessage());
                    }
                }
            };
            handler.postDelayed(bannerRunnable, 3500);
        }
    }

    private boolean isNetworkAvailable() {
        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        if (connectivityManager != null) {
            NetworkCapabilities capabilities = connectivityManager.getNetworkCapabilities(connectivityManager.getActiveNetwork());
            return capabilities != null && (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||
                    capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR));
        }
        return false;
    }

    private void showError(String message) {
        if (!isFinishing()) {
            Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
        }
    }

    private void handleError(DatabaseError error, ProgressBar progressBar) {
        if (progressBar != null) {
            progressBar.setVisibility(View.GONE);
        }
        showError(error.getMessage());
    }

    @Override
    protected void onPause() {
        super.onPause();
        if (handler != null && bannerRunnable != null) {
            handler.removeCallbacks(bannerRunnable);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (bannerViewPager.getAdapter() != null &&
                bannerViewPager.getAdapter().getItemCount() > 0) {
            autoScrollBanner();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (handler != null && bannerRunnable != null) {
            handler.removeCallbacks(bannerRunnable);
        }
        handler = null;
    }
}


//activity_main.xml:
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:background="@color/main_color"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".activities.MainActivity">

    <ScrollView
        android:id="@+id/scrollView2"
        android:layout_marginBottom="60dp"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <androidx.constraintlayout.widget.ConstraintLayout
                android:layout_width="match_parent"
                android:layout_marginTop="10dp"
                android:layout_height="200dp">

                <androidx.viewpager2.widget.ViewPager2
                    android:id="@+id/banner"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toTopOf="parent" />

                <ProgressBar
                    android:id="@+id/progressBar3"
                    style="?android:attr/progressBarStyle"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    app:layout_constraintBottom_toBottomOf="parent"
                    app:layout_constraintEnd_toEndOf="parent"
                    app:layout_constraintStart_toStartOf="parent"
                    app:layout_constraintTop_toTopOf="parent" />

            </androidx.constraintlayout.widget.ConstraintLayout>

            <EditText
                android:id="@+id/searchBar"
                android:layout_width="match_parent"
                android:layout_height="50dp"
                android:layout_margin="10dp"
                android:background="@drawable/edittext_background"
                android:drawableEnd="@drawable/search"
                android:drawablePadding="8dp"
                android:ems="10"
                android:hint="Phim bạn muốn xem ..."
                android:inputType="text"
                android:padding="12dp"
                android:textColor="@color/white"
                android:textColorHint="@color/white" />

            <!-- Moved TabLayout here -->
            <!-- In ScrollView's LinearLayout -->
            <com.google.android.material.tabs.TabLayout
                android:id="@+id/tabLayout"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:background="@color/main_color"
                app:tabTextColor="@color/white"
                app:tabSelectedTextColor="@color/light_purple"
                app:tabIndicatorColor="@color/light_purple"
                app:tabMode="fixed"
                app:tabGravity="fill" />

            <androidx.viewpager2.widget.ViewPager2
                android:id="@+id/viewPagerTabs"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:minHeight="400dp" />


        </LinearLayout>
    </ScrollView>

    <androidx.viewpager2.widget.ViewPager2
        android:id="@+id/viewPager"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toTopOf="@id/bottom_nav"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <com.ismaeldivita.chipnavigation.ChipNavigationBar
        android:id="@+id/bottom_nav"
        android:layout_width="match_parent"
        android:layout_height="60dp"
        android:background="@color/nav_bg"
        android:elevation="8dp"
        android:padding="8dp"
        app:cnb_menuResource="@menu/bottom_menu"
        app:cnb_unselectedColor="@color/nav_text_color"
        app:cnb_radius="8dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>


//fragment_movie_list:
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:background="@color/main_color">

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/movieRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:clipToPadding="false"
        android:padding="4dp" />

    <ProgressBar
        android:id="@+id/movieProgressBar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        android:visibility="gone" />

</FrameLayout>

//MovieAdapter.java:
package com.finalproject.movieticketbooking.adapters;


import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import com.bumptech.glide.Glide;
import com.finalproject.movieticketbooking.R;
import com.finalproject.movieticketbooking.models.Movie;
import java.util.ArrayList;
import java.util.List;

public class MovieAdapter extends RecyclerView.Adapter<MovieAdapter.MovieViewHolder> {
    private List<Movie> movies = new ArrayList<>();
    private OnMovieClickListener listener;

    @NonNull
    @Override
    public MovieViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_movie, parent, false);
        return new MovieViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull MovieViewHolder holder, int position) {
        Movie movie = movies.get(position);
        holder.bind(movie);
    }

    @Override
    public int getItemCount() {
        return movies.size();
    }

    public void setMovies(List<Movie> movies) {
        this.movies = movies;
        notifyDataSetChanged();
    }

    public void setOnMovieClickListener(OnMovieClickListener listener) {
        this.listener = listener;
    }

    class MovieViewHolder extends RecyclerView.ViewHolder {
        private ImageView moviePoster;
        private TextView movieTitle;
        private TextView movieDuration;
        private TextView movieAgeRating;

        MovieViewHolder(@NonNull View itemView) {
            super(itemView);
            moviePoster = itemView.findViewById(R.id.moviePoster);
            movieTitle = itemView.findViewById(R.id.movieTitle);
            movieDuration = itemView.findViewById(R.id.movieDuration);
            movieAgeRating = itemView.findViewById(R.id.movieAgeRating);

            itemView.setOnClickListener(v -> {
                int position = getAdapterPosition();
                if (position != RecyclerView.NO_POSITION && listener != null) {
                    listener.onMovieClick(movies.get(position));
                }
            });
        }

        void bind(Movie movie) {
            movieTitle.setText(movie.getTitle());
            movieDuration.setText(movie.getDuration() + " min");
            movieAgeRating.setText(movie.getAgeRating());

            // Load image using Glide
            Glide.with(itemView.getContext())
                    .load(movie.getPoster().toString())
                    .placeholder(R.drawable.placeholder_movie)
                    .error(R.drawable.error_movie)
                    .into(moviePoster);
        }
    }

    public interface OnMovieClickListener {
        void onMovieClick(Movie movie);
    }
}


//ViewPagerAdapter.java:
package com.finalproject.movieticketbooking.adapters;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;
import androidx.viewpager2.adapter.FragmentStateAdapter;

import com.finalproject.movieticketbooking.fragments.NowPlayingFragment;
import com.finalproject.movieticketbooking.fragments.UpcomingFragment;

public class ViewPagerAdapter extends FragmentStateAdapter {
    private static final int TAB_COUNT = 2;

    public ViewPagerAdapter(@NonNull FragmentActivity fragmentActivity) {
        super(fragmentActivity);
    }

    @NonNull
    @Override
    public Fragment createFragment(int position) {
        switch (position) {
            case 0:
                return new NowPlayingFragment();
            case 1:
                return new UpcomingFragment();
            default:
                return new NowPlayingFragment();
        }
    }

    @Override
    public int getItemCount() {
        return TAB_COUNT;
    }
}


